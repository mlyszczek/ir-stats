; directory where uploads will be stored, program must be able to
; write to it
output-dir = lkxbzdrvsvpuhkyqpnoadzvbujk

; domain on which server runs, this will be used to send user back
; information where he can download what he just sent
domain = uwltqnurivwjyytw

; run as daemon
daemonize = 1

; username program should run on, for security reason it should not
; be root.  This will take effect only when -D (--daemonize) options
; is provided
user = qszoprmzofhnyjyaac

; group program should run on, for security reason it should not be
; root This will take effect only when -D (--daemonize) options is
; provided
group = aexxnyrdtqwiynbddlgwspfoocwqtdw

; wher to store daemon pid file (only with -D)
pid-file = frlzhcmxkgsmorggtfouwtpnhu

[list]
; list of ips that will be able to upload to server or will be banned
; from uploading. Such behaviour is controlled via list_type option.
; If list_type is 0, this option is ignored
file = tmerzuyfnfrnpctvimfsh

; what filter list to use, only one can be used at a time. If you
; chose none, everybody will be able to upload. Possible values are:
;
;    white
;       only addresses that are specified in list_file will be able
;       to upload to the server, any other addresses will be rejected
;
;    none
;       *everyone* is able to upload to the server
;
;    blacklist
;       addresses listed in list_file will *not* be able to upload,
;       and will be rejected upon connection, any other addresses
;       will be able to upload freely
type = none

; list of ip addresses program will bind to, good if you want to
; allow uploading only from localhost or vpn, or for any other good
; reason.  If set to 0.0.0.0, program will listen on every interface
; found in the system. You should NOT mix 0.0.0.0 with any other
; addresses, its either 0.0.0.0 or any combination of other IPs.
;
; List is just a simple comma-separated list of ips with no spaces
;
; 0.0.0.0
; 10.1.1.1
; 10.1.1.1,192.168.1.1,78.88.132.21
; 0.0.0.0,10.1.1.1 <- NOT allowed, will cause error and server won't start
ip-bind = uzypxobcp

[log]
; all queries will be logged in this file, no logs from program
; runtime will be written here, only pure queries
query = dgxwgsagkuizzjcljod

; location where to store program logs
path = wmgczhfkfabhvdmazfpnawepgabnufwbvnwtse

; defines how much verbose program will be about what it does
;
;   fatal  - fatal errors, application cannot continue to run
;   alert  - major failure that needs immediate attention
;   crit   - critical errors
;   error  - error but recoverable
;   warn   - warnings
;   notice - normal message, but of high importance
;   info   - informations log, doesn't print that much, recommended
;   debug  - debug, prints a lot of not really needed things in normal usage
level = warn

; max number of files to rotate (0 to disable)
frotate-number = 7598

; if set, logs will contain pretty colors to quickly find
; information debugger might need. Note that not all terminals
; support it! Either 0 or 1 is supported
colors = 1

; minimum level of log that should always be synced
fsync-level = 2

; maximum size single log file can get
frotate-size = 11680

; log will be synced to drive when this ammount of bytes have
; been written
fsync-every = 20533

; timestamp format to add to each log message
ts = short

; source of the clock to use for timestamping
ts-tm = clock

; level of fraction of seconds detail to print
ts-tm-fract = off

; add filename to every print
finfo = 1

; add function name to every print
funcinfo = 1

; outputs to enable for printing
output = stderr

; string to prefix each log print with
prefix = uahyaur

; maximum log level to print
level-flag = warn

[max]
; max size of file client can upload
filesize = 2750

; maximum number of connected clients that can upload simultaneously.
; This value is for all listening interfaces. So if you listen on 2
; interfaces, it may be that eth0 will handling max_connections
; clients, and connection from eth1 will result in rejected client
connections = 29486

; maximum time to wait for any activity from the client before
; closing connection and cleaning up resources. Activity is when
; client sends even one byte. This timeout is checked in text
; termination uploads only.
timeout = 2238

; after this ammount of seconds pass, program assumes client will not
; be sending any more data and transfer is complete. This timeout is
; checked in timed uploads only.
timed-timeout = 19134

[port]
; port on which program will listen for incoming connection, this is
; unsecure and text termination upload. Set 0 to disable this port.
plain = 17907

; port on which program will listen for incoming connection. This is
; unsecure and timed upload. Set 0 to disable this port.
plain-timed = 1003

; port on which program will listen for incoming connection. This is
; secure and text termination upload. Set 0 to disable this port.
;
; if termsend was compiled without ssl support, this must be set to 0
; or program won't start
ssl = 32546

; port on which program will listen for incoming connection. This is
; secure and timed upload. Set 0 to disable this port
;
; if termsend was compiled without ssl support, this must be set to 0
; or program won't start
ssl-timed = 15931

[ssl]
; SSL key to use with encypted uploads. Must be provided when any of
; the SSL port is enabled
key-file = oijgphnfq

; file which holds password for KEY_FILE. This file must contain only
; password and must contain new line at the end of file. If your last
; charater is new line in your password, file must contain 2 new line
; characters at the end, as one will always be trimmed.
;
; If KEY_FILE is not password protected, use empty value
pass-file = boxagdculabnihtepqnkfmvf

; SSL certificate to use with encrypted uploads. Must be provided when
; any of the SSL port is enabled
cert-file = fwxfoxnjiiugep
